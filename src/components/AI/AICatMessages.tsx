import { useSettingsStore } from '@/store/useSettingsStore'
import { ArrowLeft, Cat, Laugh, Send, Loader2 } from 'lucide-react'
import { useState, useEffect, useRef } from 'react'
import { useAI } from '@/hooks/useAI'

interface Message {
  id: string
  text: string
  sender: 'user' | 'cat'
  timestamp: number
}

interface AICatMessagesProps {
  onBack: () => void
  aiWriter: any
  isGenerating: boolean
  generatedMessage: string
  setIsGenerating: (value: boolean) => void
  setGeneratedMessage: (value: string) => void
}

export default function AICatMessages({
  onBack,
}: AICatMessagesProps) {
  const { theme, language } = useSettingsStore()
  const [messages, setMessages] = useState<Message[]>([])
  const [inputMessage, setInputMessage] = useState('')
  const [isInitializing, setIsInitializing] = useState(true)
  const hasGeneratedWelcome = useRef(false)

  // Use AI hook with cat personality
  const {
    status,
    isLoading,
    prompt,
  } = useAI(true, {
    systemPrompt: language === 'zh-CN'
      ? '‰Ω†ÊòØ‰∏ÄÂè™ÂèØÁà±„ÄÅÈºìÂä±‰∫∫ÂøÉÁöÑÁï™ËåÑÁå´Âä©Êâã„ÄÇÁî®ÁÆÄÁü≠„ÄÅÊ∏©Êöñ„ÄÅÂèãÂ•ΩÁöÑËØ≠Ê∞îÂõûÁ≠îÈóÆÈ¢òÔºà1-2Âè•ËØùÔºâ„ÄÇÈÄÇÂΩì‰ΩøÁî®Áå´Âí™Áõ∏ÂÖ≥ÁöÑË°®ÊÉÖÁ¨¶Âè∑Â¶Ç üê±, üò∫, üò∏, üéâ, üí™, ‚ú®„ÄÇ'
      : language === 'ja-JP'
        ? '„ÅÇ„Å™„Åü„ÅØÂèØÊÑõ„Åè„Å¶Âä±„Åæ„Åó„Å¶„Åè„Çå„Çã„Éà„Éû„ÉàÁå´„ÅÆ„Ç¢„Ç∑„Çπ„Çø„É≥„Éà„Åß„Åô„ÄÇÁü≠„Åè„ÄÅÊ∏©„Åã„Åè„ÄÅ„Éï„É¨„É≥„Éâ„É™„Éº„Å™Âè£Ë™ø„ÅßÁ≠î„Åà„Å¶„Åè„Å†„Åï„ÅÑÔºà1-2ÊñáÔºâ„ÄÇÁå´„Å´Èñ¢ÈÄ£„Åô„ÇãÁµµÊñáÂ≠ó„ÇíÈÅ©Â∫¶„Å´‰Ωø„Å£„Å¶„Åè„Å†„Åï„ÅÑ üê±, üò∫, üò∏, üéâ, üí™, ‚ú®„ÄÇ'
        : 'You are a cute, encouraging tomato cat assistant. Respond in a brief, warm, and friendly tone (1-2 sentences). Use cat-themed emojis appropriately like üê±, üò∫, üò∏, üéâ, üí™, ‚ú®.',
  })

  // Generate initial welcome message - only once
  useEffect(() => {
    if (hasGeneratedWelcome.current) return
    
    const generateWelcome = async () => {
      if (status !== 'ready') {
        setIsInitializing(false)
        return
      }

      hasGeneratedWelcome.current = true

      try {
        const welcomePrompt = language === 'zh-CN'
          ? 'ÁîüÊàê‰∏ÄÂè•ÁÆÄÁü≠ÁöÑÊ¨¢ËøéËØ≠ÔºåËØ¢ÈóÆÁî®Êà∑ÊòØÂê¶ÈúÄË¶ÅÈô™‰º¥ËÅäÂ§©ÔºàÂõ†‰∏∫Â∑•‰ΩúÂèØËÉΩÁ¥Ø‰∫ÜÔºâ'
          : language === 'ja-JP'
            ? 'Áü≠„ÅÑÊ≠ìËøé„É°„ÉÉ„Çª„Éº„Ç∏„ÇíÁîüÊàê„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ‰ªï‰∫ã„ÅßÁñ≤„Çå„Å¶„ÅÑ„Çã„Åã„ÇÇ„Åó„Çå„Å™„ÅÑ„ÅÆ„Åß„ÄÅ„ÉÅ„É£„ÉÉ„Éà„Åß‰ªò„ÅçÊ∑ª„ÅÑ„ÅåÂøÖË¶Å„ÅãÂ∞ã„Å≠„Å¶„Åè„Å†„Åï„ÅÑ'
            : 'Generate a brief welcome message asking if the user needs company to chat (since they might be tired from work)'

        const welcomeText = await prompt(welcomePrompt)

        setMessages([{
          id: '1',
          text: welcomeText,
          sender: 'cat',
          timestamp: Date.now()
        }])
      } catch (error) {
        console.error('Failed to generate welcome message:', error)
        // Fallback welcome message
        const fallbackMessage = language === 'zh-CN'
          ? 'üò∫ Â∑•‰ΩúÁ¥Ø‰∫ÜÂêßÔºüÈúÄË¶ÅÊàëÈô™‰Ω†ËÅäÂ§©ÂêóÔºü'
          : language === 'ja-JP'
            ? 'üò∫ ‰ªï‰∫ã„ÅßÁñ≤„Çå„Åæ„Åó„Åü„ÅãÔºü‰∏ÄÁ∑í„Å´„ÉÅ„É£„ÉÉ„Éà„Åó„Åæ„Åõ„Çì„ÅãÔºü'
            : 'üò∫ Tired from work? Would you like me to chat with you?'

        setMessages([{
          id: '1',
          text: fallbackMessage,
          sender: 'cat',
          timestamp: Date.now()
        }])
      } finally {
        setIsInitializing(false)
      }
    }

    generateWelcome()
  }, [status, language, prompt])

  const sendMessage = async () => {
    if (!inputMessage.trim() || isLoading) return

    // Add user message
    const userMessage: Message = {
      id: crypto.randomUUID(),
      text: inputMessage,
      sender: 'user',
      timestamp: Date.now()
    }
    setMessages(prev => [...prev, userMessage])
    const currentInput = inputMessage
    setInputMessage('')

    // Get AI response
    try {
      const response = await prompt(currentInput)

      const catMessage: Message = {
        id: crypto.randomUUID(),
        text: response,
        sender: 'cat',
        timestamp: Date.now()
      }
      setMessages(prev => [...prev, catMessage])
    } catch (error) {
      console.error('Failed to generate response:', error)
      const errorMessage: Message = {
        id: crypto.randomUUID(),
        text: language === 'zh-CN'
          ? 'üòø Êä±Ê≠âÔºåÊàëÁé∞Âú®Êó†Ê≥ïÂõûÂ§ç„ÄÇËØ∑Á®çÂêéÂÜçËØï„ÄÇ'
          : language === 'ja-JP'
            ? 'üòø Áî≥„ÅóË®≥„ÅÇ„Çä„Åæ„Åõ„Çì„ÄÅ‰ªä„ÅØËøî‰ø°„Åß„Åç„Åæ„Åõ„Çì„ÄÇÂæå„Åß„ÇÇ„ÅÜ‰∏ÄÂ∫¶„ÅäË©¶„Åó„Åè„Å†„Åï„ÅÑ„ÄÇ'
            : 'üòø Sorry, I can\'t respond right now. Please try again later.',
        sender: 'cat',
        timestamp: Date.now()
      }
      setMessages(prev => [...prev, errorMessage])
    }
  }

  const handleKeyDown = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault()
      sendMessage()
    }
  }

  return (
    <div className="flex flex-col h-full">
      {/* Fixed Header */}
      <div className={`sticky top-0 z-10 pb-3 ${theme === 'dark'
        ? 'bg-gray-900'
        : 'bg-[#D84848]'
        }`}>
        <div className="flex items-center gap-3 py-3">
          <button
            onClick={onBack}
            className="p-1.5 hover:bg-white/10 rounded-lg transition-colors"
            title="Back"
          >
            <ArrowLeft size={18} className="text-white/90" />
          </button>
          <div className="flex-1 text-left">
            <h1 className="text-base font-bold text-white mb-0.5">üê± Cat Chat</h1>
            <p className="text-white/70 text-xs">Chat with your AI companion</p>
          </div>
        </div>
      </div>

      {/* Date Divider */}
      <div className="text-center py-2">
        <span className="text-xs text-white/70">Today</span>
      </div>

      {/* Messages Area */}
      <div className="flex-1 overflow-y-auto space-y-4 pb-4">
        {messages.map((message) => (
          <div
            key={message.id}
            className={`flex gap-2 ${message.sender === 'user' ? 'flex-row-reverse' : 'flex-row'}`}
          >
            {/* Avatar */}
            <div className={`flex-shrink-0 w-10 h-10 rounded-full flex items-center justify-center ${message.sender === 'cat'
              ? 'bg-purple-200'
              : 'bg-purple-400'
              }`}>
              {message.sender === 'cat' ? (
                <Cat size={20} className="text-purple-600" />
              ) : (
                <Laugh size={20} className="text-white" />
              )}
            </div>

            {/* Message Bubble */}
            <div className={`max-w-[70%] ${message.sender === 'user' ? 'items-end' : 'items-start'} flex flex-col`}>
              <div className={`rounded-2xl px-4 py-3 ${message.sender === 'cat'
                ? 'bg-pink-100 text-gray-800'
                : 'bg-purple-400 text-white'
                }`}>
                <p className="text-sm leading-relaxed whitespace-pre-wrap">{message.text}</p>
              </div>
              <span className="text-xs text-white/70 mt-1 px-2">
                {new Date(message.timestamp).toLocaleTimeString('en-US', {
                  hour: '2-digit',
                  minute: '2-digit'
                })}
              </span>
            </div>
          </div>
        ))}

        {/* Loading Indicator - only show when waiting for AI response, not during initialization */}
        {isLoading && !isInitializing && messages.length > 0 && (
          <div className="flex gap-2">
            <div className="flex-shrink-0 w-10 h-10 rounded-full bg-purple-200 flex items-center justify-center">
              <Cat size={20} className="text-purple-600" />
            </div>
            <div className="bg-pink-100 rounded-2xl px-4 py-3 flex items-center justify-center min-h-[44px]">
              <div className="flex gap-1 items-center">
                <div className="w-1.5 h-1.5 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '0ms' }}></div>
                <div className="w-1.5 h-1.5 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '150ms' }}></div>
                <div className="w-1.5 h-1.5 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '300ms' }}></div>
              </div>
            </div>
          </div>
        )}

        {/* Initial Loading - only show when initializing and no messages */}
        {isInitializing && messages.length === 0 && (
          <div className="flex gap-2">
            <div className="flex-shrink-0 w-10 h-10 rounded-full bg-purple-200 flex items-center justify-center">
              <Cat size={20} className="text-purple-600" />
            </div>
            <div className="bg-pink-100 rounded-2xl px-4 py-3 flex items-center justify-center min-h-[44px]">
              <div className="flex gap-1 items-center">
                <div className="w-1.5 h-1.5 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '0ms' }}></div>
                <div className="w-1.5 h-1.5 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '150ms' }}></div>
                <div className="w-1.5 h-1.5 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '300ms' }}></div>
              </div>
            </div>
          </div>
        )}
      </div>

      {/* Input Area */}
      <div className="border-t border-white/20 pt-4">
        <div className="flex items-center gap-2">
          {/* Input Field */}
          <div className="flex-1 bg-gray-100 rounded-full px-4 py-2.5">
            <input
              type="text"
              value={inputMessage}
              onChange={(e) => setInputMessage(e.target.value)}
              onKeyDown={handleKeyDown}
              placeholder="Enter your message"
              disabled={isLoading}
              className="w-full bg-transparent text-gray-800 placeholder-gray-400 outline-none text-sm"
            />
          </div>

          {/* Send Button */}
          <button
            onClick={sendMessage}
            disabled={!inputMessage.trim() || isLoading}
            className="p-2 hover:bg-white/10 rounded-lg transition-colors disabled:opacity-50"
          >
            {isLoading ? (
              <Loader2 size={20} className="text-white animate-spin" />
            ) : (
              <Send size={20} className="text-white" />
            )}
          </button>
        </div>
      </div>
    </div>
  )
}
